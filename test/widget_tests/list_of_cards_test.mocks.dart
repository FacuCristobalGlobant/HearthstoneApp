// Mocks generated by Mockito 5.3.0 from annotations
// in hearthstoneapp/test/widget_tests/list_of_cards_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hearthstoneapp/src/core/util/api_response_state.dart' as _i4;
import 'package:hearthstoneapp/src/presentation/bloc/list_of_cards_bloc.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HearthstoneCardListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHearthstoneCardListBloc extends _i1.Mock
    implements _i2.HearthstoneCardListBloc {
  MockHearthstoneCardListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Stream<_i4.ApiResponse> getCardListStream() =>
      (super.noSuchMethod(Invocation.method(#getCardListStream, []),
              returnValue: _i3.Stream<_i4.ApiResponse>.empty())
          as _i3.Stream<_i4.ApiResponse>);
  @override
  _i3.Future<void> searchForCards(
          Map<String, String>? endpoint, String? keyword) =>
      (super.noSuchMethod(
              Invocation.method(#searchForCards, [endpoint, keyword]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
}
